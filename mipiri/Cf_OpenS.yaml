AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Cloud Formation for supporting openshift installation.

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Description: Availability zone to deploy
    Type: AWS::EC2::AvailabilityZone::Name
  ElasticIP:
    Description: ElasticIP to be associated to the master
    Type: String
    Default: 2.2.2.2

Mappings:
  RegionMap:
    eu-central-1:
      CentOS7: "ami-337be65c"

Resources:
  ocVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/28
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: openshift-cf-vpc
  #---
  # Subnets end Route tables
  #---
  publicIG:
    Type: AWS::EC2::InternetGateway

  publicIGAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref publicIG
      VpcId: !Ref ocVPC

  publicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref ocVPC
      CidrBlock: 10.0.0.0/28
      AvailabilityZone: !Ref AvailabilityZone

  publicroutetable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ocVPC

  publicSubnetRouteAssociate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
     RouteTableId: !Ref publicroutetable
     SubnetId: !Ref publicSubnet

  route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref publicroutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref publicIG

  #---
  # Elastic ip asociation
  #---

  elasticAssociate:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      InstanceId: !Ref ec2OcMaster
      EIP:
        Ref: ElasticIP
  #---
  # EC2 instances 
  #---
  ec2OcMaster:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Steps:
            - "dockerRepo"
            - "dependencies"
            - "varios"
        dockerRepo:
          files:
            /etc/yum.repos.d/docker.repo:
              content: !Sub | 
                  [dockerrepo] 
                  name=Docker Repository 
                  baseurl=https://yum.dockerproject.org/repo/main/centos/7/ 
                  enabled=1
                  gpgcheck=1 
                  gpgkey=https://yum.dockerproject.org/gpg 
              mode: "000644"
              owner: "root"
              group: "root"              
        dependencies: 
          packages:
            yum:
              - "git" 
              - "docker-engine"
              - "wget"
              - "elinks"
        varios: 
         commands: 
           01_dockerGroup: 
            command: "usermod -a -G docker centos"

    Properties:
      Tags:
      - Key: Name
        Value: openshift-master
      InstanceType: t2.large
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref publicSubnet
          GroupSet:
             - !Ref masterSecGroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "userdate its here" > /home/centos/userdata.txt
          yum update -y
          yum install -y epel-release
          yum install -y awscli
          /usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cp -v /usr/lib/python2*/site-packages/aws_cfn_bootstrap*/init/redhat/cfn-hup /etc/init.d
          chmod +x /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -v --configsets Steps --stack ${AWS::StackName} --resource ec2OcMaster --region ${AWS::Region}
  ec2OcNode1:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker1
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref publicSubnet
          GroupSet:
             - !Ref nodesSecGroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]

  ec2OcNode2:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
      - Key: Name
        Value: openshift-worker2
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref publicSubnet
          GroupSet:
           - !Ref nodesSecGroup
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", CentOS7]
  

  #---
  # EBS for the Master
  #---
  ebsMaster:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt ec2OcMaster.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  ebsMasterAttach:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref ebsMaster
      InstanceId: !Ref ec2OcMaster

  #---
  # EBS for the Node1
  #---
  ebsNode1:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt ec2OcNode1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  ebsNode1Attach:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref ebsNode1
      InstanceId: !Ref ec2OcNode1

  #---
  # EBS for the Node2
  #---

  ebsNode2:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt ec2OcNode1.AvailabilityZone
      Size: 50
    DeletionPolicy: Delete

  ebsNode2Attach:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: '/dev/xvdb'
      VolumeId: !Ref ebsNode2
      InstanceId: !Ref ec2OcNode2

  #---
  # Security Groups used for all nodes.
  #---
  nodesSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ocVPC
      GroupDescription: Security group for the worker Kubernetes nodes
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/28
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  #---
  # Security Group for the Master
  #---
  masterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ocVPC
      GroupDescription: Security group for the master Kubernetes node
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/28
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 0.0.0.0/0
  #---
  # Some Outputs
  #---
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref ocVPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  dnsMaster:
    Description: Openshift Master
    Value: !GetAtt ec2OcMaster.PublicDnsName
